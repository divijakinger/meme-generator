[{"C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\index.js":"1","C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\App.js":"2","C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\components\\Header.js":"3","C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\components\\Meme.js":"4","C:\\divija\\meme-generator\\src\\index.js":"5","C:\\divija\\meme-generator\\src\\App.js":"6","C:\\divija\\meme-generator\\src\\components\\Header.js":"7","C:\\divija\\meme-generator\\src\\components\\Meme.js":"8","C:\\divija\\meme-generator\\src\\components\\Footer.js":"9"},{"size":169,"mtime":1655953295694,"results":"10","hashOfConfig":"11"},{"size":259,"mtime":1655953843743,"results":"12","hashOfConfig":"11"},{"size":367,"mtime":1655953518617,"results":"13","hashOfConfig":"11"},{"size":1810,"mtime":1658031827199,"results":"14","hashOfConfig":"11"},{"size":169,"mtime":1655953295694,"results":"15","hashOfConfig":"16"},{"size":325,"mtime":1658048839015,"results":"17","hashOfConfig":"16"},{"size":364,"mtime":1658036030311,"results":"18","hashOfConfig":"16"},{"size":2429,"mtime":1658048056149,"results":"19","hashOfConfig":"16"},{"size":234,"mtime":1658048811393,"results":"20","hashOfConfig":"16"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"25iym2",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1clhzos",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\index.js",[],[],"C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\App.js",[],[],"C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\components\\Header.js",["50"],[],"C:\\divija\\studies\\html-css\\React\\meme-generator\\src\\components\\Meme.js",["51"],[],"C:\\divija\\meme-generator\\src\\index.js",[],[],"C:\\divija\\meme-generator\\src\\App.js",[],[],"C:\\divija\\meme-generator\\src\\components\\Header.js",["52"],[],"import React from \"react\";\r\nimport logo from \"../images/logo.png\"\r\n\r\nexport default function Header(){\r\n    return(\r\n        <header className=\"header\">\r\n            <img src={logo} className=\"header-img\"/>\r\n            <h2 className=\"header-title\">Meme Generator</h2>\r\n            <h4 className=\"header-sub\">Create Your Own Memes</h4>\r\n        </header>\r\n    )\r\n}","C:\\divija\\meme-generator\\src\\components\\Meme.js",["53"],[],"import React from \"react\";\r\nimport downloadjs from 'downloadjs';\r\nimport html2canvas from 'html2canvas';\r\n\r\nexport default function Meme(){\r\n    const [getMeme,setGetMeme] = React.useState({\r\n        topText : \"\",\r\n        bottomText:\"\",\r\n        randomImage:\"\"\r\n    });\r\n\r\n    const [allMemeImages,setAllMemeImages] = React.useState([]);\r\n    \r\n    React.useEffect(()=>{\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(res => res.json())\r\n        .then(data => setAllMemeImages(data))\r\n    },[])\r\n     \r\n    function getMemeImage(){\r\n        const memes_array = allMemeImages.data.memes;\r\n        const randomNum = Math.floor(Math.random()*memes_array.length);\r\n        const url = memes_array[randomNum].url;\r\n        setGetMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            randomImage : url,\r\n        }));\r\n\r\n        console.log(getMeme.randomImage);\r\n    }\r\n\r\n    const handleDownloadImage = React.useCallback(async () => {\r\n        const memeEle =\r\n          document.getElementById(\"meme-div\");\r\n          \r\n        if (!memeEle) return;\r\n    \r\n        const canvas = await html2canvas(memeEle,{\r\n            useCORS: true,\r\n        });\r\n\r\n        const dataURL = canvas.toDataURL('image/png');\r\n        downloadjs(dataURL, 'download.png', 'image/png');\r\n      }, []);\r\n    \r\n    function handleChange(event){\r\n        const {name,value} = event.target;\r\n        setGetMeme(prevMeme => ({\r\n            ...prevMeme,\r\n            [name]:value\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"form\">\r\n                <input className=\"form-inputs\" type=\"text\" placeholder=\"Enter top text\" name=\"topText\" value={getMeme.topText} onChange={handleChange}/>\r\n                <input className=\"form-inputs\" type=\"text\" placeholder=\"Enter bottom text\" name=\"bottomText\" value={getMeme.bottomText} onChange={handleChange}/>\r\n                <button className=\"form-button\" onClick={getMemeImage}>Get a new meme image</button>\r\n            </div>\r\n            <div className=\"meme\" id=\"meme-div\">\r\n                <img src={getMeme.randomImage} className=\"meme--image\" />\r\n                <h2 className=\"meme--text top\">{getMeme.topText}</h2>\r\n                <h2 className=\"meme--text bottom\">{getMeme.bottomText}</h2>\r\n            </div>\r\n            <button type=\"button\" className=\"download-btn\" onClick={handleDownloadImage}>Download</button>\r\n        </main>\r\n    )\r\n}","C:\\divija\\meme-generator\\src\\components\\Footer.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":7,"column":13,"nodeType":"56","endLine":7,"endColumn":53},{"ruleId":"54","severity":1,"message":"55","line":46,"column":17,"nodeType":"56","endLine":46,"endColumn":74},{"ruleId":"54","severity":1,"message":"55","line":7,"column":13,"nodeType":"56","endLine":7,"endColumn":53},{"ruleId":"54","severity":1,"message":"55","line":62,"column":17,"nodeType":"56","endLine":62,"endColumn":74},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]